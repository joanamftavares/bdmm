{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Big Data Modelling and Management 2022"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Group number: \n",
    "\n",
    "Students (name : student number):\n",
    "\n",
    "\n",
    "1.\n",
    "\n",
    "\n",
    "2.\n",
    "\n",
    "3.\n",
    "\n",
    "4.\n",
    "\n",
    "5.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ðŸšš BDMM Second Homework Assignment ðŸšš \n",
    "\n",
    "_The Wide World Importers (WWI) is a wholesales novelty goods importer and distributor operating from the San Francisco bay area. In this assignment we will be working with their database._ \n",
    "You can get more information and details about the WWI database in the following link: https://docs.microsoft.com/en-us/sql/samples/wide-world-importers-what-is?view=sql-server-ver15\n",
    "\n",
    "The focus of the second assignment is modelling. We will use the World Wide Importers database and convert it to a document-based database. To that end, we will be leveraging concepts like data denormalization, indices, and mongodb design patterns. \n",
    "\n",
    "More information on the extended datamodel to be found here: </br>  \n",
    "https://docs.microsoft.com/en-us/sql/samples/wide-world-importers-oltp-database-catalog?view=sql-server-ver15"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problem Description\n",
    "\n",
    "Your team has just arrived at WWI (a leading company in logistics). Welcome!   <br>\n",
    "Even though business is thriving, the IT department is going through a bad time.   <br>\n",
    "Digitalization was never a priority for the company and now the company operational and analytical requirements are starting to grow beyond the capabilities of their existing data architecture.   <br>\n",
    "\n",
    "WWI data are spread accross different systems, but we've already managed to pull them all into a mongo dump file. This data file is an exact dump of the SQL data so includes all the same structure, the SQL tables become collections and the rows become documents. This means all the original SQL keys are included in the data.<br>\n",
    "Currently, the costs to develop the necessary queries to collect data to answer questions asked by the different departments are too high. <br>\n",
    "\n",
    "Management concluded it is the right time to revise and revamp the data architecture, in order to speed up operations. \n",
    "\n",
    "In that context, your team was tasked with merging all the company data into a single and coherent Mongo database. <br>\n",
    "It is expected that, with your solution, WWI will have a better understanding of their business and that the different departments will be able to obtain efficiently the answers they need.\n",
    "\n",
    "The WWI team shared with you an ERD of their current datamodel:<br>\n",
    "![datamodel](./WWI.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note** You can open the file WWI.png that is in the same directory as this notebook to see the above image in more detail and zoom in as you need.\n",
    "\n",
    "Addtionally, the WWI team asked you the deliver the following outputs in **4 weeks**:\n",
    "- Understand and model the database in MongoDB.\n",
    "- Setup the database so that it is performs well for the queries they have provided. You should include reasoning in comments for the decisions you make on modelling the database.\n",
    "- Answer the questions (queries) on the data provided.  \n",
    "- Submit the results by following the instructions.  \n",
    "\n",
    "With these deliveries, you will have created a prototype and allows the management to decide whether MongoDB is a good solution that meets their requirements."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Design Requirements\n",
    "\n",
    "Note that WWI has the following query requirements for the database.\n",
    "\n",
    "1. The web team needs to know:  \n",
    "    1. Which state province do we have the most suppliers in?  \n",
    "    2. How many people have three or more `OtherLanguage`? \n",
    "    3. Top 10 most common `OtherLanguage` for people records. \n",
    "    4. How many customer records are valid after `November 2015`? \n",
    "    5. What percentage of people records don't have the UserPreferences field? \n",
    "\n",
    "2. The warehouse group needs to know:  \n",
    "    1. What is the average difference in days between OrderDate and ExpectedDeliveryDate for orders sold by (`SalespersonPersonID`) person with the name `Jack Potter`?\n",
    "    2. Which items get ordered the most in bulk (largest average quantity ordered)?  \n",
    "    3. Which two items get ordered together the most?\n",
    "    4. For each customer category which 3 items have the ordered the most?\n",
    "    5. What is the current stock of each stockgroup?\n",
    "\n",
    "3. The CFO needs to know:  \n",
    "    1. What is the monthly total order count for each month?  \n",
    "    2. How many orders are there from the customer `Tailspin Toys (Head Office)`?\n",
    "    3. What are the average monthly sales prices of all goods sold? \n",
    "    4. In each state province what is the average customer credit limit?   \n",
    "    5. What are the yearly expenditures with each supplier (per supplier name)?  \n",
    "\n",
    "4. Partnerships needs to know:  \n",
    "    1. What is the most common payment type?  \n",
    "    2. What percentage of people have their `Title` as `Team Member`?\n",
    "    3. Which supplier of the category `Novelty Goods Supplier` has the most transactions?  \n",
    "    4. What is the highest `CommissionRate` that a person has?\n",
    "\n",
    "5. The marketing team needs to know:  \n",
    "    1. What is the name of the sales person with the largest sum of invoice values in 2013 (person whose customers paid the most money)?\n",
    "    2. Who are the most common `PickedByPersonID` person names for orders done by customer `Adriana Pena`?\n",
    "    3. How many people have in their name the string `Sara`?\n",
    "    5. What are the top 10 most Common Names (Primary or Surnames) of people?\n",
    "\n",
    "Transform the mongo dump file provided with this notebook and model a database following mongodb's best practices. You should adjust the data model to best fit the use cases provided above. Think about collections, embedding, linking, indexing, and the patterns learned in class. Provide justifications for each decision you make. What, if any, are the trade-off's or disadvantages of your approach.\n",
    "\n",
    "Use MongoDB queries to answer the questions on your transformed database.\n",
    "\n",
    "### Deliverables\n",
    "\n",
    "1. Notebook with all DB creation operations and CRUD operations to create the data model. **Important** you should include in comments justification for your decisions on modelling the data.;\n",
    "2. Second notebook with all required queries and answers for the questions, **Important** please indicate with comments the steps in the data model you took to optimise each query;\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Additional Information\n",
    "\n",
    "## Groups  \n",
    "\n",
    "Students should form groups of at least 4 and at most 5. <br>\n",
    "\n",
    "## Submission  Deadline\n",
    "\n",
    "The submission includes two notebooks with outputs (cells must be run). \n",
    "Please make sure to indicate:\n",
    "1. group number,\n",
    "2. group members with student names and numbers,\n",
    "3. the name of the database that you created. <br>\n",
    "\n",
    "Upload the notebook on moodle before **23:59 on June 22nd**\n",
    "\n",
    "## Evaluation   \n",
    "\n",
    "The second homework assignment counts 40% towards your final mark of the curricular unit. <br>\n",
    "The assignment will be scored from 0 to 20. <br>\n",
    "\n",
    "Each group submission will be evaluated on three components:\n",
    "1. correctness of results;\n",
    "2. simplicity and performance characteristics of the solution;\n",
    "3. justification of decisions.\n",
    "\n",
    "50% -  Database design  \n",
    "50% -  Query results including performance\n",
    "\n",
    "Please note that all code delivered in this assignment will go through plagiarism automated checks. <br>\n",
    "Groups with high similarity levels in their code will undergo investigation.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from tqdm.notebook import tqdm\n",
    "from pprint import pprint\n",
    "import numpy as np\n",
    "from pymongo import MongoClient"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Connect to database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install pymongo\n",
    "\n",
    "user =\"AzureDiamond\"\n",
    "password=\"hunter2\"\n",
    "host=\"localhost\"\n",
    "port=\"27017\"\n",
    "protocol=\"mongodb\"\n",
    "\n",
    "client = MongoClient(f\"{protocol}://{user}:{password}@{host}:{port}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Database info: Database(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True), 'WideWorldImporters')\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['stockgroups',\n",
       " 'people',\n",
       " 'invoicelines',\n",
       " 'packagetypes',\n",
       " 'orderlines',\n",
       " 'cities',\n",
       " 'paymentmethods',\n",
       " 'customers',\n",
       " 'suppliers_embed',\n",
       " 'invoices',\n",
       " 'purchaseorderlines',\n",
       " 'suppliercategories',\n",
       " 'countries',\n",
       " 'customercategories',\n",
       " 'purchaseorders',\n",
       " 'stateprovinces',\n",
       " 'Purchasing_SupplierTransactions',\n",
       " 'stockitems',\n",
       " 'customertransactions_embed',\n",
       " 'customer_transactions_embed',\n",
       " 'colors',\n",
       " 'customertransactions',\n",
       " 'stockitemstransactions',\n",
       " 'deliverymethods',\n",
       " 'transactiontypes',\n",
       " 'suppliertransactions',\n",
       " 'stockitemsstockgroups',\n",
       " 'supplier_transactions_embed',\n",
       " 'suppliers',\n",
       " 'orders']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db = client.WideWorldImporters\n",
    "print(f\"Database info: {db}\\n\")\n",
    "\n",
    "db.list_collection_names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "stockgroups\n",
      "{'LastEditedBy': 1,\n",
      " 'StockGroupID': 1,\n",
      " 'StockGroupName': 'Novelty Items',\n",
      " 'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " '_id': ObjectId('6287c7a5636e5a12694aaa2b')}\n",
      "\n",
      "people\n",
      "{'CustomFields': None,\n",
      " 'EmailAddress': None,\n",
      " 'FaxNumber': None,\n",
      " 'FullName': 'Data Conversion Only',\n",
      " 'HashedPassword': None,\n",
      " 'IsEmployee': False,\n",
      " 'IsExternalLogonProvider': False,\n",
      " 'IsPermittedToLogon': False,\n",
      " 'IsSalesperson': False,\n",
      " 'IsSystemUser': False,\n",
      " 'LastEditedBy': 1,\n",
      " 'LogonName': 'NO LOGON',\n",
      " 'OtherLanguages': None,\n",
      " 'PersonID': 1,\n",
      " 'PhoneNumber': None,\n",
      " 'Photo': None,\n",
      " 'PreferredName': 'Data Conversion Only',\n",
      " 'SearchName': 'Data Conversion Only Data Conversion Only',\n",
      " 'UserPreferences': '{\"theme\":\"blitzer\",\"dateFormat\":\"yy-mm-dd\",\"timeZone\": '\n",
      "                    '\"PST\",\"table\":{\"pagingType\":\"full_numbers\",\"pageLength\": '\n",
      "                    '25},\"favoritesOnDashboard\":true}',\n",
      " 'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " '_id': ObjectId('6287c4dc636e5a12693da1cf')}\n",
      "\n",
      "invoicelines\n",
      "{'Description': 'Ride on toy sedan car (Black) 1/12 scale',\n",
      " 'ExtendedPrice': Decimal128('2645.00'),\n",
      " 'InvoiceID': 1,\n",
      " 'InvoiceLineID': 1,\n",
      " 'LastEditedBy': 7,\n",
      " 'LastEditedWhen': datetime.datetime(2013, 1, 1, 12, 0),\n",
      " 'LineProfit': Decimal128('850.00'),\n",
      " 'PackageTypeID': 7,\n",
      " 'Quantity': 10,\n",
      " 'StockItemID': 67,\n",
      " 'TaxAmount': Decimal128('345.00'),\n",
      " 'TaxRate': Decimal128('15.000'),\n",
      " 'UnitPrice': Decimal128('230.00'),\n",
      " '_id': ObjectId('6287c5b0636e5a12693dcacf')}\n",
      "\n",
      "packagetypes\n",
      "{'LastEditedBy': 1,\n",
      " 'PackageTypeID': 1,\n",
      " 'PackageTypeName': 'Bag',\n",
      " 'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " '_id': ObjectId('6287c618636e5a126945ee8f')}\n",
      "\n",
      "orderlines\n",
      "{'Description': '32 mm Double sided bubble wrap 50m',\n",
      " 'LastEditedBy': 4,\n",
      " 'LastEditedWhen': datetime.datetime(2013, 1, 2, 11, 0),\n",
      " 'OrderID': 45,\n",
      " 'OrderLineID': 1,\n",
      " 'PackageTypeID': 7,\n",
      " 'PickedQuantity': 50,\n",
      " 'PickingCompletedWhen': datetime.datetime(2013, 1, 2, 11, 0),\n",
      " 'Quantity': 50,\n",
      " 'StockItemID': 164,\n",
      " 'TaxRate': Decimal128('15.000'),\n",
      " 'UnitPrice': Decimal128('112.00'),\n",
      " '_id': ObjectId('6287c5d0636e5a1269414699')}\n",
      "\n",
      "cities\n",
      "{'CityID': 1,\n",
      " 'CityName': 'Aaronsburg',\n",
      " 'LastEditedBy': 1,\n",
      " 'LatestRecordedPopulation': 613,\n",
      " 'Location': None,\n",
      " 'StateProvinceID': 39,\n",
      " 'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " '_id': ObjectId('6287c46b636e5a12693d0c54')}\n",
      "\n",
      "paymentmethods\n",
      "{'LastEditedBy': 1,\n",
      " 'PaymentMethodID': 1,\n",
      " 'PaymentMethodName': 'Cash',\n",
      " 'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " '_id': ObjectId('6287c4c8636e5a12693da1aa')}\n",
      "\n",
      "customers\n",
      "{'AccountOpenedDate': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'AlternateContactPersonID': 1002,\n",
      " 'BillToCustomerID': 1,\n",
      " 'BuyingGroupID': 1,\n",
      " 'CreditLimit': None,\n",
      " 'CustomerCategoryID': 3,\n",
      " 'CustomerID': 1,\n",
      " 'CustomerName': 'Tailspin Toys (Head Office)',\n",
      " 'DeliveryAddressLine1': 'Shop 38',\n",
      " 'DeliveryAddressLine2': '1877 Mittal Road',\n",
      " 'DeliveryCityID': 19586,\n",
      " 'DeliveryLocation': None,\n",
      " 'DeliveryMethodID': 3,\n",
      " 'DeliveryPostalCode': '90410',\n",
      " 'DeliveryRun': '',\n",
      " 'FaxNumber': '(308) 555-0101',\n",
      " 'IsOnCreditHold': False,\n",
      " 'IsStatementSent': False,\n",
      " 'LastEditedBy': 1,\n",
      " 'PaymentDays': 7,\n",
      " 'PhoneNumber': '(308) 555-0100',\n",
      " 'PostalAddressLine1': 'PO Box 8975',\n",
      " 'PostalAddressLine2': 'Ribeiroville',\n",
      " 'PostalCityID': 19586,\n",
      " 'PostalPostalCode': '90410',\n",
      " 'PrimaryContactPersonID': 1001,\n",
      " 'RunPosition': '',\n",
      " 'StandardDiscountPercentage': Decimal128('0.000'),\n",
      " 'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " 'WebsiteURL': 'http://www.tailspintoys.com',\n",
      " '_id': ObjectId('6287c598636e5a12693dc817')}\n",
      "\n",
      "suppliers_embed\n",
      "{'AlternateContactPersonID': 22,\n",
      " 'BankAccountBranch': 'Woodgrove Bank Zionsville',\n",
      " 'BankAccountCode': '356981',\n",
      " 'BankAccountName': 'A Datum Corporation',\n",
      " 'BankAccountNumber': '8575824136',\n",
      " 'BankInternationalCode': '25986',\n",
      " 'DeliveryAddressLine1': 'Suite 10',\n",
      " 'DeliveryAddressLine2': '183838 Southwest Boulevard',\n",
      " 'DeliveryCityID': 38171,\n",
      " 'DeliveryLocation': None,\n",
      " 'DeliveryMethodID': 7,\n",
      " 'DeliveryPostalCode': '46077',\n",
      " 'FaxNumber': '(847) 555-0101',\n",
      " 'InternalComments': None,\n",
      " 'LastEditedBy': 1,\n",
      " 'PaymentDays': 14,\n",
      " 'PhoneNumber': '(847) 555-0100',\n",
      " 'PostalAddressLine1': 'PO Box 1039',\n",
      " 'PostalAddressLine2': 'Surrey',\n",
      " 'PostalCityID': 38171,\n",
      " 'PostalPostalCode': '46077',\n",
      " 'PrimaryContactPersonID': 21,\n",
      " 'SupplierCategoryID': 2,\n",
      " 'SupplierID': 1,\n",
      " 'SupplierName': 'A Datum Corporation',\n",
      " 'SupplierReference': 'AA20384',\n",
      " 'ValidFrom': datetime.datetime(2013, 1, 1, 0, 5),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " 'WebsiteURL': 'http://www.adatum.com',\n",
      " '_id': ObjectId('6287c561636e5a12693dc7c4'),\n",
      " 'suppliercategories': {'LastEditedBy': 1,\n",
      "                        'SupplierCategoryID': 2,\n",
      "                        'SupplierCategoryName': 'Novelty Goods Supplier',\n",
      "                        'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      "                        'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      "                        '_id': ObjectId('6287c6fd636e5a1269498d34')}}\n",
      "\n",
      "invoices\n",
      "{'AccountsPersonID': 3032,\n",
      " 'BillToCustomerID': 832,\n",
      " 'Comments': None,\n",
      " 'ConfirmedDeliveryTime': datetime.datetime(2013, 1, 2, 7, 5),\n",
      " 'ConfirmedReceivedBy': 'Aakriti Byrraju',\n",
      " 'ContactPersonID': 3032,\n",
      " 'CreditNoteReason': None,\n",
      " 'CustomerID': 832,\n",
      " 'CustomerPurchaseOrderNumber': '12126',\n",
      " 'DeliveryInstructions': 'Suite 24, 1345 Jun Avenue',\n",
      " 'DeliveryMethodID': 3,\n",
      " 'DeliveryRun': '',\n",
      " 'InternalComments': None,\n",
      " 'InvoiceDate': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'InvoiceID': 1,\n",
      " 'IsCreditNote': False,\n",
      " 'LastEditedBy': 15,\n",
      " 'LastEditedWhen': datetime.datetime(2013, 1, 2, 7, 0),\n",
      " 'OrderID': 1,\n",
      " 'PackedByPersonID': 14,\n",
      " 'ReturnedDeliveryData': '{\"Events\": [{ \"Event\":\"Ready for '\n",
      "                         'collection\",\"EventTime\":\"2013-01-01T12:00:00\",\"ConNote\":\"EAN-125-1051\"},{ '\n",
      "                         '\"Event\":\"DeliveryAttempt\",\"EventTime\":\"2013-01-02T07:05:00\",\"ConNote\":\"EAN-125-1051\",\"DriverID\":15,\"Latitude\":41.3617214,\"Longitude\":-81.4695602,\"Status\":\"Delivered\"}],\"DeliveredWhen\":\"2013-01-02T07:05:00\",\"ReceivedBy\":\"Aakriti '\n",
      "                         'Byrraju\"}',\n",
      " 'RunPosition': '',\n",
      " 'SalespersonPersonID': 2,\n",
      " 'TotalChillerItems': 0,\n",
      " 'TotalDryItems': 1,\n",
      " '_id': ObjectId('6287c761636e5a1269499598')}\n",
      "\n",
      "purchaseorderlines\n",
      "{'Description': 'Pack of 12 action figures (variety)',\n",
      " 'ExpectedUnitPricePerOuter': Decimal128('5.50'),\n",
      " 'IsOrderLineFinalized': True,\n",
      " 'LastEditedBy': 6,\n",
      " 'LastEditedWhen': datetime.datetime(2013, 1, 2, 7, 0),\n",
      " 'LastReceiptDate': datetime.datetime(2013, 1, 2, 0, 0),\n",
      " 'OrderedOuters': 18,\n",
      " 'PackageTypeID': 9,\n",
      " 'PurchaseOrderID': 1,\n",
      " 'PurchaseOrderLineID': 1,\n",
      " 'ReceivedOuters': 18,\n",
      " 'StockItemID': 150,\n",
      " '_id': ObjectId('6287c52e636e5a12693da6cc')}\n",
      "\n",
      "suppliercategories\n",
      "{'LastEditedBy': 1,\n",
      " 'SupplierCategoryID': 1,\n",
      " 'SupplierCategoryName': 'Other Wholesaler',\n",
      " 'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " '_id': ObjectId('6287c6fd636e5a1269498d33')}\n",
      "\n",
      "countries\n",
      "{'Border': None,\n",
      " 'Continent': 'Asia',\n",
      " 'CountryID': 1,\n",
      " 'CountryName': 'Afghanistan',\n",
      " 'CountryType': 'UN Member State',\n",
      " 'FormalName': 'Islamic State of Afghanistan',\n",
      " 'IsoAlpha3Code': 'AFG',\n",
      " 'IsoNumericCode': 4,\n",
      " 'LastEditedBy': 1,\n",
      " 'LatestRecordedPopulation': 28400000,\n",
      " 'Region': 'Asia',\n",
      " 'Subregion': 'Southern Asia',\n",
      " 'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " '_id': ObjectId('6287c495636e5a12693da0ac')}\n",
      "\n",
      "customercategories\n",
      "{'CustomerCategoryID': 1,\n",
      " 'CustomerCategoryName': 'Agent',\n",
      " 'LastEditedBy': 1,\n",
      " 'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " '_id': ObjectId('6287c57e636e5a12693dc7ee')}\n",
      "\n",
      "purchaseorders\n",
      "{'Comments': None,\n",
      " 'ContactPersonID': 2,\n",
      " 'DeliveryMethodID': 9,\n",
      " 'ExpectedDeliveryDate': datetime.datetime(2013, 1, 15, 0, 0),\n",
      " 'InternalComments': None,\n",
      " 'IsOrderFinalized': True,\n",
      " 'LastEditedBy': 6,\n",
      " 'LastEditedWhen': datetime.datetime(2013, 1, 2, 7, 0),\n",
      " 'OrderDate': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'PurchaseOrderID': 1,\n",
      " 'SupplierID': 2,\n",
      " 'SupplierReference': 'B2084020',\n",
      " '_id': ObjectId('6287c74a636e5a1269498d5d')}\n",
      "\n",
      "stateprovinces\n",
      "{'Border': None,\n",
      " 'CountryID': 230,\n",
      " 'LastEditedBy': 15,\n",
      " 'LatestRecordedPopulation': 5437278,\n",
      " 'SalesTerritory': 'Southeast',\n",
      " 'StateProvinceCode': 'AL',\n",
      " 'StateProvinceID': 1,\n",
      " 'StateProvinceName': 'Alabama',\n",
      " 'ValidFrom': datetime.datetime(2015, 7, 1, 16, 0),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " '_id': ObjectId('6287c4fd636e5a12693da647')}\n",
      "\n",
      "Purchasing_SupplierTransactions\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n",
      "\n",
      "stockitems\n",
      "{'Barcode': None,\n",
      " 'Brand': None,\n",
      " 'ColorID': None,\n",
      " 'CustomFields': '{ \"CountryOfManufacture\": \"China\", \"Tags\": [\"USB Powered\"] }',\n",
      " 'InternalComments': None,\n",
      " 'IsChillerStock': False,\n",
      " 'LastEditedBy': 1,\n",
      " 'LeadTimeDays': 14,\n",
      " 'MarketingComments': 'Complete with 12 projectiles',\n",
      " 'OuterPackageID': 7,\n",
      " 'Photo': None,\n",
      " 'QuantityPerOuter': 1,\n",
      " 'RecommendedRetailPrice': Decimal128('37.38'),\n",
      " 'SearchDetails': 'USB missile launcher (Green) Complete with 12 projectiles',\n",
      " 'Size': None,\n",
      " 'StockItemID': 1,\n",
      " 'StockItemName': 'USB missile launcher (Green)',\n",
      " 'SupplierID': 12,\n",
      " 'Tags': '[\"USB Powered\"]',\n",
      " 'TaxRate': Decimal128('15.000'),\n",
      " 'TypicalWeightPerUnit': Decimal128('0.300'),\n",
      " 'UnitPackageID': 7,\n",
      " 'UnitPrice': Decimal128('25.00'),\n",
      " 'ValidFrom': datetime.datetime(2016, 5, 31, 23, 11),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " '_id': ObjectId('6287c78f636e5a12694aa927')}\n",
      "\n",
      "customertransactions_embed\n",
      "{'AmountExcludingTax': Decimal128('313.50'),\n",
      " 'FinalizationDate': datetime.datetime(2013, 1, 7, 0, 0),\n",
      " 'IsFinalized': True,\n",
      " 'LastEditedBy': 4,\n",
      " 'LastEditedWhen': datetime.datetime(2013, 1, 7, 9, 0),\n",
      " 'OutstandingBalance': Decimal128('0.00'),\n",
      " 'PaymentMethodID': 4,\n",
      " 'PurchaseOrderID': 1,\n",
      " 'SupplierID': 2,\n",
      " 'SupplierInvoiceNumber': '7290',\n",
      " 'SupplierTransactionID': 134,\n",
      " 'TaxAmount': Decimal128('47.03'),\n",
      " 'TransactionAmount': Decimal128('360.53'),\n",
      " 'TransactionDate': datetime.datetime(2013, 1, 2, 0, 0),\n",
      " 'TransactionTypeID': 5,\n",
      " '_id': ObjectId('6287c7c4636e5a12694aaa56'),\n",
      " 'paymentmethods': {'LastEditedBy': 1,\n",
      "                    'PaymentMethodID': 4,\n",
      "                    'PaymentMethodName': 'EFT',\n",
      "                    'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      "                    'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      "                    '_id': ObjectId('6287c4c8636e5a12693da1ad')}}\n",
      "\n",
      "customer_transactions_embed\n",
      "{'AmountExcludingTax': Decimal128('0.00'),\n",
      " 'CustomerID': 1,\n",
      " 'CustomerTransactionID': 231,\n",
      " 'FinalizationDate': datetime.datetime(2013, 1, 2, 0, 0),\n",
      " 'InvoiceID': None,\n",
      " 'IsFinalized': True,\n",
      " 'LastEditedBy': 10,\n",
      " 'LastEditedWhen': datetime.datetime(2013, 1, 2, 11, 30),\n",
      " 'OutstandingBalance': Decimal128('0.00'),\n",
      " 'PaymentMethodID': 4,\n",
      " 'TaxAmount': Decimal128('0.00'),\n",
      " 'TransactionAmount': Decimal128('-9513.49'),\n",
      " 'TransactionDate': datetime.datetime(2013, 1, 2, 0, 0),\n",
      " 'TransactionTypeID': 3,\n",
      " '_id': ObjectId('6287c7e1636e5a12694ab426'),\n",
      " 'paymentmethods': {'LastEditedBy': 1,\n",
      "                    'PaymentMethodID': 4,\n",
      "                    'PaymentMethodName': 'EFT',\n",
      "                    'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      "                    'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      "                    '_id': ObjectId('6287c4c8636e5a12693da1ad')}}\n",
      "\n",
      "colors\n",
      "{'ColorID': 1,\n",
      " 'ColorName': 'Azure',\n",
      " 'LastEditedBy': 1,\n",
      " 'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " '_id': ObjectId('6287c600636e5a126945ee4a')}\n",
      "\n",
      "customertransactions\n",
      "{'AmountExcludingTax': Decimal128('2300.00'),\n",
      " 'CustomerID': 832,\n",
      " 'CustomerTransactionID': 2,\n",
      " 'FinalizationDate': datetime.datetime(2013, 1, 2, 0, 0),\n",
      " 'InvoiceID': 1,\n",
      " 'IsFinalized': True,\n",
      " 'LastEditedBy': 10,\n",
      " 'LastEditedWhen': datetime.datetime(2013, 1, 2, 11, 30),\n",
      " 'OutstandingBalance': Decimal128('0.00'),\n",
      " 'PaymentMethodID': None,\n",
      " 'TaxAmount': Decimal128('345.00'),\n",
      " 'TransactionAmount': Decimal128('2645.00'),\n",
      " 'TransactionDate': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'TransactionTypeID': 1,\n",
      " '_id': ObjectId('6287c7e1636e5a12694ab3fd')}\n",
      "\n",
      "stockitemstransactions\n",
      "{'CustomerID': 28,\n",
      " 'InvoiceID': 1325,\n",
      " 'LastEditedBy': 4,\n",
      " 'LastEditedWhen': datetime.datetime(2013, 1, 26, 12, 0),\n",
      " 'PurchaseOrderID': None,\n",
      " 'Quantity': Decimal128('-10.000'),\n",
      " 'StockItemID': 213,\n",
      " 'StockItemTransactionID': 6293,\n",
      " 'SupplierID': None,\n",
      " 'TransactionOccurredWhen': datetime.datetime(2013, 1, 26, 12, 0),\n",
      " 'TransactionTypeID': 10,\n",
      " '_id': ObjectId('6287c64d636e5a126945f099')}\n",
      "\n",
      "deliverymethods\n",
      "{'DeliveryMethodID': 1,\n",
      " 'DeliveryMethodName': 'Post',\n",
      " 'LastEditedBy': 1,\n",
      " 'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " '_id': ObjectId('6287c4b0636e5a12693da18b')}\n",
      "\n",
      "transactiontypes\n",
      "{'LastEditedBy': 1,\n",
      " 'TransactionTypeID': 1,\n",
      " 'TransactionTypeName': 'Customer Invoice',\n",
      " 'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " '_id': ObjectId('6287c514636e5a12693da69e')}\n",
      "\n",
      "suppliertransactions\n",
      "{'AmountExcludingTax': Decimal128('313.50'),\n",
      " 'FinalizationDate': datetime.datetime(2013, 1, 7, 0, 0),\n",
      " 'IsFinalized': True,\n",
      " 'LastEditedBy': 4,\n",
      " 'LastEditedWhen': datetime.datetime(2013, 1, 7, 9, 0),\n",
      " 'OutstandingBalance': Decimal128('0.00'),\n",
      " 'PaymentMethodID': 4,\n",
      " 'PurchaseOrderID': 1,\n",
      " 'SupplierID': 2,\n",
      " 'SupplierInvoiceNumber': '7290',\n",
      " 'SupplierTransactionID': 134,\n",
      " 'TaxAmount': Decimal128('47.03'),\n",
      " 'TransactionAmount': Decimal128('360.53'),\n",
      " 'TransactionDate': datetime.datetime(2013, 1, 2, 0, 0),\n",
      " 'TransactionTypeID': 5,\n",
      " '_id': ObjectId('6287c7c4636e5a12694aaa56')}\n",
      "\n",
      "stockitemsstockgroups\n",
      "{'LastEditedBy': 1,\n",
      " 'LastEditedWhen': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'StockGroupID': 6,\n",
      " 'StockItemID': 1,\n",
      " 'StockItemStockGroupID': 1,\n",
      " '_id': ObjectId('6287c634636e5a126945eebe')}\n",
      "\n",
      "supplier_transactions_embed\n",
      "{'AmountExcludingTax': Decimal128('313.50'),\n",
      " 'FinalizationDate': datetime.datetime(2013, 1, 7, 0, 0),\n",
      " 'IsFinalized': True,\n",
      " 'LastEditedBy': 4,\n",
      " 'LastEditedWhen': datetime.datetime(2013, 1, 7, 9, 0),\n",
      " 'OutstandingBalance': Decimal128('0.00'),\n",
      " 'PaymentMethodID': 4,\n",
      " 'PurchaseOrderID': 1,\n",
      " 'SupplierID': 2,\n",
      " 'SupplierInvoiceNumber': '7290',\n",
      " 'SupplierTransactionID': 134,\n",
      " 'TaxAmount': Decimal128('47.03'),\n",
      " 'TransactionAmount': Decimal128('360.53'),\n",
      " 'TransactionDate': datetime.datetime(2013, 1, 2, 0, 0),\n",
      " 'TransactionTypeID': 5,\n",
      " '_id': ObjectId('6287c7c4636e5a12694aaa56'),\n",
      " 'paymentmethods': {'LastEditedBy': 1,\n",
      "                    'PaymentMethodID': 4,\n",
      "                    'PaymentMethodName': 'EFT',\n",
      "                    'ValidFrom': datetime.datetime(2013, 1, 1, 0, 0),\n",
      "                    'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      "                    '_id': ObjectId('6287c4c8636e5a12693da1ad')}}\n",
      "\n",
      "suppliers\n",
      "{'AlternateContactPersonID': 22,\n",
      " 'BankAccountBranch': 'Woodgrove Bank Zionsville',\n",
      " 'BankAccountCode': '356981',\n",
      " 'BankAccountName': 'A Datum Corporation',\n",
      " 'BankAccountNumber': '8575824136',\n",
      " 'BankInternationalCode': '25986',\n",
      " 'DeliveryAddressLine1': 'Suite 10',\n",
      " 'DeliveryAddressLine2': '183838 Southwest Boulevard',\n",
      " 'DeliveryCityID': 38171,\n",
      " 'DeliveryLocation': None,\n",
      " 'DeliveryMethodID': 7,\n",
      " 'DeliveryPostalCode': '46077',\n",
      " 'FaxNumber': '(847) 555-0101',\n",
      " 'InternalComments': None,\n",
      " 'LastEditedBy': 1,\n",
      " 'PaymentDays': 14,\n",
      " 'PhoneNumber': '(847) 555-0100',\n",
      " 'PostalAddressLine1': 'PO Box 1039',\n",
      " 'PostalAddressLine2': 'Surrey',\n",
      " 'PostalCityID': 38171,\n",
      " 'PostalPostalCode': '46077',\n",
      " 'PrimaryContactPersonID': 21,\n",
      " 'SupplierCategoryID': 2,\n",
      " 'SupplierID': 1,\n",
      " 'SupplierName': 'A Datum Corporation',\n",
      " 'SupplierReference': 'AA20384',\n",
      " 'ValidFrom': datetime.datetime(2013, 1, 1, 0, 5),\n",
      " 'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000),\n",
      " 'WebsiteURL': 'http://www.adatum.com',\n",
      " '_id': ObjectId('6287c561636e5a12693dc7c4')}\n",
      "\n",
      "orders\n",
      "{'BackorderOrderID': 45,\n",
      " 'Comments': None,\n",
      " 'ContactPersonID': 3032,\n",
      " 'CustomerID': 832,\n",
      " 'CustomerPurchaseOrderNumber': '12126',\n",
      " 'DeliveryInstructions': None,\n",
      " 'ExpectedDeliveryDate': datetime.datetime(2013, 1, 2, 0, 0),\n",
      " 'InternalComments': None,\n",
      " 'IsUndersupplyBackordered': True,\n",
      " 'LastEditedBy': 7,\n",
      " 'LastEditedWhen': datetime.datetime(2013, 1, 1, 12, 0),\n",
      " 'OrderDate': datetime.datetime(2013, 1, 1, 0, 0),\n",
      " 'OrderID': 1,\n",
      " 'PickedByPersonID': None,\n",
      " 'PickingCompletedWhen': datetime.datetime(2013, 1, 1, 12, 0),\n",
      " 'SalespersonPersonID': 2,\n",
      " '_id': ObjectId('6287c5ec636e5a126944ceae')}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for collection in db.list_collection_names():\n",
    "    print(collection)\n",
    "    pprint(db[collection].find_one())\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Denormalization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Embedding "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**PurchaseOrderLines and PurchaseOrders**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "        \"$lookup\":{\n",
    "           \"from\": \"purchaseorderlines\",\n",
    "           \"localField\": \"PurchaseOrderID\",\n",
    "           \"foreignField\": \"PurchaseOrderID\",\n",
    "           \"as\": \"purchaseorderslines\"\n",
    "        }\n",
    "    }\n",
    "\n",
    "\n",
    "query_2 = {\n",
    "    \"$unwind\": \"$purchaseorderslines\"\n",
    "}\n",
    "\n",
    "\n",
    "query_4 = { \n",
    "        \"$merge\" : {\n",
    "            \"into\" : \"purchaseorders_embed\",\n",
    "            #\"whenMatched\": \"replace\"\n",
    "        } \n",
    "    }\n",
    "\n",
    "pipeline = [query_1, query_2, query_4]\n",
    "\n",
    "r = db.purchaseorders.aggregate(pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pprint(db.purchaseorders_embed.find_one({}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**SalesInvoice_Lines and SalesInvoices*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_sales_inv_1 = {\n",
    "        \"$lookup\":{\n",
    "           \"from\": \"invoicelines\",\n",
    "           \"localField\": \"InvoiceID\",\n",
    "           \"foreignField\": \"InvoiceID\",\n",
    "           \"as\": \"invoicelines\"\n",
    "        }\n",
    "    }\n",
    "\n",
    "query_sales_inv_2 = { \n",
    "        \"$merge\" : {\n",
    "            \"into\" : \"invoices_emb\",\n",
    "        } \n",
    "    }\n",
    "\n",
    "pipeline = [query_sales_inv_1, query_sales_inv_2]\n",
    "\n",
    "r = db.invoices.aggregate(pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(db.invoices_emb.find_one({}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(db.invoices_emb.find_one({}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**State Provinces and Cities**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "        \"$lookup\":{\n",
    "           \"from\": \"stateprovinces\",\n",
    "           \"localField\": \"StateProvinceID\",\n",
    "           \"foreignField\": \"StateProvinceID\",\n",
    "           \"as\": \"provinces\"\n",
    "        }\n",
    "    }\n",
    "\n",
    "\n",
    "query_2 = {\n",
    "    \"$unwind\": \"$provinces\"\n",
    "}\n",
    "\n",
    "\n",
    "query_3 = { \n",
    "        \"$merge\" : {\n",
    "            \"into\" : \"cities_embed\",\n",
    "            \"whenMatched\": \"replace\"\n",
    "        } \n",
    "    }\n",
    "\n",
    "\n",
    "pipeline = [query_1, query_2, query_3]\n",
    "\n",
    "result = db.cities.aggregate(pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pprint(db.cities_embed.find_one({}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Sales Customer and State Provincies/Cities - Delivery City**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "        \"$lookup\":{\n",
    "           \"from\": \"cities_embed\",\n",
    "           \"localField\": \"DeliveryCityID\",\n",
    "           \"foreignField\": \"CityID\",\n",
    "           \"as\": \"delivery_cities\"\n",
    "        }\n",
    "    }\n",
    "\n",
    "query_2 = {\n",
    "    \"$unwind\": \"$delivery_cities\"\n",
    "}\n",
    "\n",
    "\n",
    "query_3 = { \n",
    "        \"$merge\" : {\n",
    "            \"into\" : \"customer_embed\",\n",
    "        } \n",
    "    }\n",
    "\n",
    "\n",
    "pipeline = [query_1, query_2, query_3]\n",
    "\n",
    "r = db.customers.aggregate(pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(db.customer_embed.find_one({}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Sales Customer and State Provincies/Cities - Postal City**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "        \"$lookup\":{\n",
    "           \"from\": \"cities_embed\",\n",
    "           \"localField\": \"PostalCityID\",\n",
    "           \"foreignField\": \"CityID\",\n",
    "           \"as\": \"postal_cities\"\n",
    "        }\n",
    "    }\n",
    "\n",
    "query_2 = {\n",
    "    \"$unwind\": \"$postal_cities\"\n",
    "}\n",
    "\n",
    "\n",
    "query_3 = { \n",
    "        \"$merge\" : {\n",
    "            \"into\" : \"customer_embed\",\n",
    "        } \n",
    "    }\n",
    "\n",
    "\n",
    "pipeline = [query_1, query_2, query_3]\n",
    "\n",
    "r = db.customers.aggregate(pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(db.customer_embed.find_one({}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Suppliers into Suppliers Transactions**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "        \"$lookup\":{\n",
    "           \"from\": \"suppliers\",\n",
    "           \"localField\": \"SupplierID\",\n",
    "           \"foreignField\": \"SupplierID\",\n",
    "           \"as\": \"supplier_info\"\n",
    "        }\n",
    "    }\n",
    "\n",
    "\n",
    "query_2 = {\n",
    "    \"$unwind\": \"$supplier_info\"\n",
    "}\n",
    "\n",
    "\n",
    "query_3 = { \n",
    "        \"$merge\" : {\n",
    "            \"into\" : \"supplier_embed\",\n",
    "        } \n",
    "    }\n",
    "\n",
    "pipeline = [query_1, query_2, query_3]\n",
    "\n",
    "result = db.suppliertransactions.aggregate(pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pprint(db.supplier_embed.find_one({}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Customer and Customer Category**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "        \"$lookup\":{\n",
    "           \"from\": \"customercategories\",\n",
    "           \"localField\": \"CustomerCategoryID\",\n",
    "           \"foreignField\": \"CustomerCategoryID\",\n",
    "           \"as\": \"customer_category\"\n",
    "        }\n",
    "    }\n",
    "\n",
    "\n",
    "query_2 = {\n",
    "    \"$unwind\": \"$customer_category\"\n",
    "}\n",
    "\n",
    "\n",
    "query_3 = { \n",
    "        \"$merge\" : {\n",
    "            \"into\" : \"customer_embed\",\n",
    "        } \n",
    "    }\n",
    "\n",
    "pipeline = [query_1, query_2, query_3]\n",
    "\n",
    "result = db.customers.aggregate(pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pprint(db.customer_embed.find_one({}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**PaymentMethods in SupplierTransactions**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "    \"$lookup\":{\n",
    "        \"from\":\"paymentmethods\",\n",
    "        \"localField\":\"PaymentMethodID\",\n",
    "        \"foreignField\":\"PaymentMethodID\",\n",
    "        \"as\":\"paymentmethods\"\n",
    "    }\n",
    "}\n",
    "\n",
    "query_2 = {\n",
    "    \"$unwind\":\"$paymentmethods\"\n",
    "}\n",
    "\n",
    "query_3 = {\n",
    "    \"$merge\":{\n",
    "        \"into\":\"supplier_transactions_embed\",\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "pipeline = [query_1, query_2, query_3]\n",
    "r = db.suppliertransactions.aggregate(pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pprint(db.supplier_transactions_embed.find_one({}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**PaymentMethods in CustomerTransactions**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "    \"$lookup\":{\n",
    "        \"from\":\"paymentmethods\",\n",
    "        \"localField\":\"PaymentMethodID\",\n",
    "        \"foreignField\":\"PaymentMethodID\",\n",
    "        \"as\":\"paymentmethods\"\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "query_2 = {\n",
    "    \"$unwind\":\"$paymentmethods\"\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "query_3 = {\n",
    "    \"$merge\":{\n",
    "        \"into\":\"customer_transactions_embed\",\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "pipeline = [query_1, query_2, query_3]\n",
    "r = db.customertransactions.aggregate(pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pprint(db.customer_transactions_embed.find_one({}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**SupplierCategories in Suppliers**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "    \"$lookup\":{\n",
    "        \"from\":\"suppliercategories\",\n",
    "        \"localField\":\"SupplierCategoryID\",\n",
    "        \"foreignField\":\"SupplierCategoryID\",\n",
    "        \"as\":\"suppliercategories\"\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "query_2 = {\n",
    "    \"$unwind\":\"$suppliercategories\"\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "query_3 = {\n",
    "    \"$merge\":{\n",
    "        \"into\":\"suppliers_embed\",\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "pipeline = [query_1, query_2, query_3]\n",
    "r = db.suppliers.aggregate(pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pprint(db.suppliers_embed.find_one({}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Invoices and InvoiceLines**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "        \"$lookup\":{\n",
    "           \"from\": \"invoicelines\",\n",
    "           \"localField\": \"InvoiceID\",\n",
    "           \"foreignField\": \"InvoiceID\",\n",
    "           \"as\": \"invoicelines\"\n",
    "        }\n",
    "    }\n",
    "\n",
    "query_2 = { \n",
    "        \"$merge\" : {\n",
    "            \"into\" : \"invoices_emb\",\n",
    "        } \n",
    "    }\n",
    "\n",
    "\n",
    "pipeline = [query_1, query_2]\n",
    "\n",
    "r = database.invoices.aggregate(pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pprint(database.invoices_emb.find_one())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Customers and Orders**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "        \"$lookup\":{\n",
    "           \"from\": \"orders\",\n",
    "           \"localField\": \"CustomerID\",\n",
    "           \"foreignField\": \"CustomerID\",\n",
    "           \"as\": \"orders\"\n",
    "        }\n",
    "    }\n",
    "\n",
    "\n",
    "query_2 = { \n",
    "        \"$merge\" : {\n",
    "            \"into\" : \"customers_emb\",\n",
    "        } \n",
    "    }\n",
    "\n",
    "pipeline = [query_1, query_2]\n",
    "\n",
    "r = database.customers.aggregate(pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pprint(database.customers_emb.find_one())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. The web team needs to know:  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**A. Which state province do we have the most suppliers in?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**B. How many people have three or more ``OtherLanguage`` ?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**C. Top 10 most common ``OtherLanguage`` for people records.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**D. How many customers records are valid after ``November 2015``?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**E. What percentage of people records don't have the ``UserPreferences`` field?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. The warehouse group needs to know:  \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**A. What is the average difference in days between OrderDate and ExpectedDeliveryDate for orders sold by (`SalespersonPersonID`) person with the name `Jack Potter`?**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We want to acess information about order and expected delivery date - orders collection, and sales person - people collection. Let's take a look at each step that was performed:\n",
    "1. in the first query we use lookup to perform a equality match between the Field PersonID from the people document with the field SalespersonPersonID of the orders collection\n",
    "2. info_person is the new array field to add to the joined documents\n",
    "3. we matched the full name from the info person array that matches - or is equal - to Jack Potter\n",
    "4. in query 3 we projected the fileds to pass to the next query - salespersonID, Full Name of the sales person and the difference in days\n",
    "5. difference in days was obtained by computing the expected delivery date and order date\n",
    "6. subtract operator returns the difference between the two dates in milliseconds\n",
    "7. we grouped by the Name of Jack Potter and computed the average of the difference in days of all the orders order by him and projected the field of the difference in days diving the previously computed difference in days by 86400000 to transform  the value that was in milliseconds to days - 1 day is equal to 86.400.000 milliseconds so to convert the value we need to divide it by 86.400.000\n",
    "8. we rounded the final value to appear with 2 decimal places\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_2a_1 = {\n",
    "    \"$lookup\":\n",
    "    {\n",
    "       'from': 'people',\n",
    "       'localField': 'SalespersonPersonID',\n",
    "       'foreignField': 'PersonID',\n",
    "       'as': 'info_person'\n",
    "     }\n",
    "}\n",
    "\n",
    "query_2a_2 ={\n",
    "    '$match': {\n",
    "        'info_person.FullName' : {'$eq' : 'Jack Potter'}\n",
    "    }\n",
    "}\n",
    "\n",
    "query_2a_3 = {\n",
    "    '$project' : {\n",
    "        '_id' : False,\n",
    "        'SalespersonPersonID' : 1,\n",
    "        'info_person.FullName' : 1,\n",
    "        'difference_days' : { '$subtract': [ '$ExpectedDeliveryDate', '$OrderDate' ] },\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "query_2a_4 = {\n",
    "    '$group': {\n",
    "        '_id': {'FullName' : '$PersonInfo.FullName'}, \n",
    "        'average_dif' : {'$avg' : '$difference_days'}            \n",
    "    }\n",
    "}\n",
    "\n",
    "query_2a_5 = {\n",
    "    '$project' : {\n",
    "        '_id' : False,\n",
    "        'Average difference between expected delivery date and order date in days' : {'$round' : [{'$divide' : ['$average_dif', 86400000]}, 2]}\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipeline = [query_2a_1, query_2a_2, query_2a_3, query_2a_4, query_2a_5]\n",
    "result_2a = list(db.orders.aggregate(pipeline))\n",
    "result_2a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**B. Which items get ordered the most in bulk (largest average quantity ordered)?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#por fazer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**C. Which two items get ordered together the most?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#esperar"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**D. For each customer category which 3 items have the ordered the most?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ver e confirmar"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We want to acess information about customer category -customer_embed collection, and ordered items - invoices_emb collection. Let's look at the step by step resolution:\n",
    "1. In the first query, we use lookup to perform a equality match between the Field CustomerID from the input document with the same field in the joined collection, which is the customer_embed\n",
    "2. info_customer is the new array field to add to the joined couments\n",
    "3. In the second query, we specified the fields that we wanted to pass along to the next query: the CustomerCategoryName which is inside the field customer_category and we also want to pass the field of the StockItemID\n",
    "4. Next, we unwinded the field invoicelines because for some invoiceIDs this field has multiple invoicelineIDs inside without the unwind the groupby would return an array with the stockItems for each invoice which we did not want\n",
    "5. After the unwind, we grouped by customer category and stock item id - we want each item to appear in separately - and summed how many orders with a specific item and customer category exists to query returned the number of orders for every combination but we needed to make other groupby to group the information regarding the number of orders for every category in order to be able to sort and limit 3 items for every category\n",
    "6. Therefore, we performed another group by, goruping by customer category and pusehd the values of the item and number of orders to an array\n",
    "7. After this, we wanted to limit for each category, the most 3 ordered items but to order the number of orders we needed to unwind the OrderInfo field - where the number of orders was located- and after that we sorted from an descending order so that the most ordered items appeared in the beggining\n",
    "8. Following, we did other group by, similar to the previous one, but now with the values in a descending order\n",
    "9. Finally, we projected the fields to appear in the ouput - the id which is the customer category and the most 3 ordered items to get the 3 most ordered items, we used the slice projection operator, which returned the 3 first values in the array since it was ordered, the first 3 items were the ones with a bigger amount of orders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_2d_1 = {\n",
    "    \"$lookup\":\n",
    "    {\n",
    "       'from': 'customer_embed',\n",
    "       'localField': 'CustomerID',\n",
    "       'foreignField': 'CustomerID',\n",
    "       'as': 'info_customer'\n",
    "     }\n",
    "}\n",
    "\n",
    "\n",
    "query_2d_2 = {\n",
    "    '$project' : \n",
    "    {\n",
    "        '_id' : False,\n",
    "        'info_customer.customer_category.CustomerCategoryName' : 1,\n",
    "        'invoicelines.StockItemID':1\n",
    "    }\n",
    "}\n",
    "\n",
    "query_2d_3 = {'$unwind':  \"$invoicelines\"}\n",
    "\n",
    "\n",
    "query_2d_4 = {\n",
    "    '$group': \n",
    "    {\n",
    "        '_id': {'Customer Category' : '$info_customer.customer_category.CustomerCategoryName', 'item': '$invoicelines.StockItemID'}, \n",
    "        'number of order items' : {'$sum' : 1}\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "query_2d_5 = {\n",
    "    \"$group\": \n",
    "    {\n",
    "    \"_id\": \"$_id.Customer Category\",\n",
    "    \"OrderInfo\": \n",
    "        {\"$push\": \n",
    "            {\"item\": '$_id.item',\"nr_orders\": \"$number of order items\"}\n",
    "        }\n",
    "    }\n",
    "}\n",
    "\n",
    "query_2d_6 = {'$unwind': '$OrderInfo'}\n",
    "\n",
    "query_2d_7 = {'$sort': {'OrderInfo.nr_orders' : -1 }}\n",
    "\n",
    "query_2d_8 = { \n",
    "    \"$group\": \n",
    "    {\n",
    "    \"_id\": \"$_id\",\n",
    "    \"OrderInfo\": \n",
    "        {\"$push\": \"$OrderInfo\"}\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "query_2d_9 = {\n",
    "    '$project': \n",
    "    {\n",
    "    \"_id\": False,\n",
    "    \"Customer Category\": \"$_id\",\n",
    "    \"Most ordered items\": { \"$slice\": [ \"$OrderInfo.nr_orders\", 3 ]}\n",
    "    }\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipeline = [query_2d_1, query_2d_2, query_2d_3, query_2d_4, query_2d_5,query_2d_6, query_2d_7, query_2d_8, query_2d_9]\n",
    "result_2d = list(db.invoices_emb.aggregate(pipeline))\n",
    "result_2d"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**E. What is the current stock of each stockgroup?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. The CFO needs to know:  \n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**A. What is the monthly total order count for each month?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# we grouped by the month of each Order Date and computed the number of orders for each month using the sum aggregation function\n",
    "query_3a_1 = {\n",
    "    \"$group\": \n",
    "    {\n",
    "    \"_id\": {\"month\": { \"$month\": { \"$toDate\": \"$OrderDate\"}}}, \n",
    "    \"numberoforders\": {\"$sum\": 1} \n",
    "    }\n",
    "}\n",
    "\n",
    "# sorted the ouput by month number\n",
    "query_3a_2 = {\"$sort\":{\"_id\":1}}\n",
    "\n",
    "\n",
    "pipeline = [query_3a_1, query_3a_2]\n",
    "result_3a = list(db.orders.aggregate(pipeline))\n",
    "result_3a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**B. How many orders are there from the customer `Tailspin Toys (Head Office)`?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# firstly, we matched the CustomerName field to Tailspin Toys (Head Office)\n",
    "query_3b_1 = {'$match': {'CustomerName': 'Tailspin Toys (Head Office)'}}\n",
    "\n",
    "\n",
    "# then we use the lookup to join the orders and customers coleections by the common field - CustomerID\n",
    "query_3b_2 = {\n",
    "    \"$lookup\":\n",
    "    {\n",
    "       \"from\": \"orders\",\n",
    "       \"localField\": \"CustomerID\",\n",
    "       \"foreignField\": \"CustomerID\",\n",
    "       \"as\": \"orders\"\n",
    "     }\n",
    "}\n",
    "\n",
    "\n",
    "# then we projected the fields to appear in the ouput - the id that corresponds to the name of the customer we were interested in\n",
    "# and the size of the array created in lookup which is referent to the orders of that customer, using the size operator\n",
    "query_3b_3 = {\n",
    "    \"$project\":\n",
    "    {\n",
    "    \"_id\": 0,\n",
    "    'Customer Name': '$CustomerName',\n",
    "    \"Number of Orders\": {'$size':\"$orders\"}\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "pipeline = [query_3b_1, query_3b_2, query_3b_3]\n",
    "result_3b = list( db.customers.aggregate(pipeline))\n",
    "result_3b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:** The customer ``Tailspin Toys (Head Office)`` made 129 orders."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**C. What are the average monthly sales prices of all goods sold?** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# we grouped the purchase orders by month of the Order Date and calculated the average monthly sales\n",
    "# using the average operator on the field Expected Unit Price Per Outer in each Purchase order lines field\n",
    "\n",
    "query_3c_1 = {\n",
    "    \"$group\":\n",
    "    {\n",
    "    \"_id\": {\"month\": { \"$month\": { \"$toDate\": \"$OrderDate\"}}}, \n",
    "    \"Avg monthly Sales\": {\"$avg\": \"$purchaseorderslines.ExpectedUnitPricePerOuter\"} \n",
    "    }\n",
    "}\n",
    "\n",
    "# nextly we sorted by month and projected the ouput fields, rounding the average monthly sales to 2 decimal places\n",
    "query_3c_2 = {\"$sort\":{\"_id\":1}}\n",
    "\n",
    "query_3c_3 = {\n",
    "    '$project':\n",
    "    {\n",
    "    '_id' : True,\n",
    "    'Average Monthly Sales' : {'$round' : [\"$Avg monthly Sales\", 2]}\n",
    "    }\n",
    "}\n",
    "\n",
    "pipeline = [query_3c_1, query_3c_2, query_3c_3]\n",
    "result_3c = list(db.purchaseorders_embed.aggregate(pipeline))\n",
    "result_3c"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**D. In each state province what is the average customer credit limit?**  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# we used the State Pronvince in which the city corresponding to the Postal City is, from the customer_embed collection\n",
    "#we grouped the pronvinces by their Porvince Name and calculated the avreage value for the credit limit for each one\n",
    "query_3d_1 = {\n",
    "    \"$group\": \n",
    "    {\n",
    "    \"_id\": {\"Province\": \"$postal_cities.provinces.StateProvinceName\"},\n",
    "    \"credit limit\":{\"$avg\":\"$CreditLimit\"}\n",
    "    }\n",
    "}\n",
    "\n",
    "# sorted the values by the Province Name\n",
    "query_3d_2 = {\"$sort\":{\"_id\":1}}\n",
    "\n",
    "\n",
    "# Projected the fields to appear in the ouput - ID that corresponds to the Province and the credit limit average value rounded to 2 decimal places\n",
    "query_3d_3 = {\n",
    "    '$project':\n",
    "    {\n",
    "    '_id' : True,\n",
    "    'Average Customer Credit Limit' : {'$round' : [\"$credit limit\", 2]}\n",
    "    }\n",
    "}\n",
    "\n",
    "pipeline = [query_3d_1, query_3d_2, query_3d_3]\n",
    "result_3d = list(db.customer_embed.aggregate(pipeline))\n",
    "result_3d"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**E. What are the yearly expenditures with each supplier (per supplier name)?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# we assume the yearly expenditures are the Transactions Amounts relative to the Suppliers Invoice\n",
    "# the first query matches the transactions whose TransactionTypeID is 5 because they correspond to the transactions of \"Suppliers Invoices\"\n",
    "# which is what we are interested in to compute the yearly expenditure\n",
    "query_3e_1 = {'$match': {'TransactionTypeID': 5}}\n",
    "\n",
    "\n",
    "# in the second query we grouped the transactions by the year of the Transaction Date and by the supplier name and calculated the sum of the transactions\n",
    "query_3e_2 = {\n",
    "    \"$group\": \n",
    "    {\n",
    "    \"_id\": {\"year\": {\"$year\" : \"$TransactionDate\"}, \"supplier_name\":\"$supplier.SupplierName\"},\n",
    "    \"Expenditure\":{\"$sum\":\"$TransactionAmount\"}\n",
    "    }}\n",
    "\n",
    "\n",
    "# finally, ordered the ouput by the id \n",
    "query_3e_3 = {\"$sort\":{\"_id\":1}}\n",
    "\n",
    "pipeline = [ query_3e_1, query_3e_2, query_3e_3]\n",
    "result_3e = list(db.supplier_embed.aggregate(pipeline))\n",
    "result_3e"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Partnerships needs to know:  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**A. What is the most common payment type?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'payment_type': 'EFT', 'count': 29075}]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#First thing, we will group the payments by method name\n",
    "query_1 = {\n",
    "    '$group': {\n",
    "        '_id' : '$paymentmethods.PaymentMethodName',\n",
    "        'count' : {'$sum' : 1}\n",
    "    }\n",
    "}\n",
    "\n",
    "#Then, we will use $lookup to perform a left outer join of supplier_transactions_embed to paymentmethods\n",
    "query_2 = {\n",
    "    \"$lookup\":{\n",
    "        \"from\": \"supplier_transactions_embed\",\n",
    "        \"localField\": \"_id\",\n",
    "        \"foreignField\": \"paymentmethods.PaymentMethodName\",\n",
    "        \"as\": \"supplier_transactions_embed\"\n",
    "     }\n",
    "}\n",
    "\n",
    "\n",
    "#After, use unwind to take the array of information from supplier_transactions_embed \n",
    "query_3 = {\n",
    "    \"$unwind\": \"$supplier_transactions_embed\"\n",
    "}\n",
    "\n",
    "\n",
    "#For each payment type, count the number of payments made by customers and suppliers\n",
    "query_4 = {\n",
    "    '$group': {\n",
    "        '_id' : '$_id',\n",
    "        'customers' : { '$first': '$count' },\n",
    "        'suppliers' : {'$sum' : 1}\n",
    "    }\n",
    "}\n",
    "\n",
    "#Finally, sum the total number of payments\n",
    "query_5 = {\n",
    "    '$project': {\n",
    "        '_id' : 0,\n",
    "        'payment_type' : '$_id',\n",
    "        'count': { '$sum': [ \"$customers\", \"$suppliers\" ] }\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "pipeline = [query_1, query_2, query_3, query_4, query_5]\n",
    "\n",
    "q_4_a = db.customer_transactions_embed.aggregate(pipeline)\n",
    "\n",
    "most_common = list(q_4_a)\n",
    "\n",
    "most_common"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:** The monst common way to pay is using ``EFT`` with a total of 29075 transaction being made with said payment type."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**B. What percentage of people have their Title as Team Member?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "customFields -> 'CustomFields': '{ \"OtherLanguages\": [] ,\"HireDate\":\"2007-12-07T00:00:00\",\"Title\":\"General Manager\"}'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#como???"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**C. Which supplier of the category `Novelty Goods Supplier` has the most transactions?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ['Graphic Design Institute'], 'count': 16},\n",
       " {'_id': ['The Phone Company'], 'count': 7},\n",
       " {'_id': ['A Datum Corporation'], 'count': 7},\n",
       " {'_id': ['Contoso, Ltd.'], 'count': 2}]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Use match to search for all records in suppliers_embed where the SupplierCategoryName is Novelty Goods Supplier\n",
    "query_1 = {\n",
    "    '$match':{\n",
    "                'SupplierID':{'$in' : list(db.suppliers_embed.distinct('SupplierID',\n",
    "                                    {'suppliercategories.SupplierCategoryName':'Novelty Goods Supplier'}))\n",
    "    }\n",
    "}}\n",
    "\n",
    "\n",
    "#We will set SupplierID as the id of a supplier\n",
    "query_2 = {\n",
    "    '$project':{\n",
    "                '_id':False,\n",
    "                'supplier_id':'$SupplierID'\n",
    "    }\n",
    "}\n",
    "\n",
    "#Query 3 and 4 will count and order the transactions of supplier with said category in a descending order\n",
    "query_3 = {\n",
    "    '$group': {\n",
    "        '_id': '$supplier_id', \n",
    "        'count' : {'$sum' : 1}            \n",
    "}\n",
    "}\n",
    "\n",
    "query_4 = {\n",
    "    '$sort': {\n",
    "        'count' : -1}            \n",
    "}\n",
    "\n",
    "\n",
    "#Once again, we will use $lookup to perform a left outer join\n",
    "query_5 =     {\n",
    "        '$lookup': {\n",
    "           \"from\": \"suppliers_embed\",\n",
    "           \"localField\": \"_id\",\n",
    "           \"foreignField\": \"SupplierID\",\n",
    "           \"as\": \"suppliers_embed\"\n",
    "        }}\n",
    "\n",
    "#Finally, create a result set \n",
    "query_6 = {\n",
    "    '$project' :{\n",
    "        '_id' : '$suppliers_embed.SupplierName',\n",
    "        'count' : '$count'\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "pipeline = [query_1, query_2, query_3, query_4, query_5, query_6]\n",
    "\n",
    "q_4_c = db.suppliertransactions.aggregate(pipeline)\n",
    "\n",
    "suppliers = list(q_4_c)\n",
    "\n",
    "suppliers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:** ``Graphic Design Institute`` is the supplier that has the most transactions (16), out of the category ``Novelty Goods Supplier``"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**D. What is the highest ComissionRate that a person has?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#como???"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "    \"$lookup\":{\n",
    "        \"from\":\"people\",\n",
    "        \"localField\":\"CustomFields\",\n",
    "        \"foreignField\":\"ComissionRate\",\n",
    "        \"as\":\"people\"\n",
    "    }\n",
    "}\n",
    "\n",
    "pipeline = [query_1]\n",
    "\n",
    "r = db.people.aggregate(pipeline)\n",
    "\n",
    "result = list(r)\n",
    "\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('6287c4dc636e5a12693da1d0'),\n",
       "  'PersonID': 2,\n",
       "  'FullName': 'Kayla Woodcock',\n",
       "  'PreferredName': 'Kayla',\n",
       "  'SearchName': 'Kayla Kayla Woodcock',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'kaylaw@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'an\\x9bU\\x89vR^\\x7f\\x14\\xd7\\x80\\xeb\\xae\\x80\\xc6\\x85\\x86\\x95\\x8d\\xc9|Pm\\xb4\\x18\\xe2\\xe2\\xc4\\x9e4\\x0e',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': True,\n",
       "  'UserPreferences': '{\"theme\":\"humanity\",\"dateFormat\":\"dd/mm/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"full\",\"pageLength\": 50},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'kaylaw@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Polish\",\"Chinese\",\"Japanese\"] ,\"HireDate\":\"2008-04-19T00:00:00\",\"Title\":\"Team Member\",\"PrimarySalesTerritory\":\"Plains\",\"CommissionRate\":\"0.98\"}',\n",
       "  'OtherLanguages': '[\"Polish\",\"Chinese\",\"Japanese\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1d1'),\n",
       "  'PersonID': 3,\n",
       "  'FullName': 'Hudson Onslow',\n",
       "  'PreferredName': 'Hudson',\n",
       "  'SearchName': 'Hudson Hudson Onslow',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'hudsono@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'#f\\x8c\\xccW\\x90\\x15\\xea\\x93G6\\xc3\\xd7\\xb8~\\x866\\x0e\\xb5\\xee\\xe1d\\xc46\\x8a{\\x10<\\x11\\xe3Cn',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': True,\n",
       "  'UserPreferences': '{\"theme\":\"dark-hive\",\"dateFormat\":\"DD, MM d, yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"simple_numbers\",\"pageLength\": 10},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'hudsono@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [] ,\"HireDate\":\"2012-03-05T00:00:00\",\"Title\":\"Team Member\",\"PrimarySalesTerritory\":\"New England\",\"CommissionRate\":\"3.62\"}',\n",
       "  'OtherLanguages': '[]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1d2'),\n",
       "  'PersonID': 4,\n",
       "  'FullName': 'Isabella Rupp',\n",
       "  'PreferredName': 'Isabella',\n",
       "  'SearchName': 'Isabella Isabella Rupp',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'isabellar@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'\\xb4^|N7\\xc3/\\xa9\\xa5\\xa3\\x16\\x1b\\x9d\\xb1\\xc9\\xc1\\xe7\\x87\\xbb}\\xb4$\\xe7\\xfdz \\x89]K\\xfb]1',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': False,\n",
       "  'UserPreferences': '{\"theme\":\"ui-darkness\",\"dateFormat\":\"dd/mm/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"simple\",\"pageLength\": 10},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'isabellar@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Turkish\",\"Slovenian\"] ,\"HireDate\":\"2010-08-24T00:00:00\",\"Title\":\"Team Member\"}',\n",
       "  'OtherLanguages': '[\"Turkish\",\"Slovenian\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1d3'),\n",
       "  'PersonID': 5,\n",
       "  'FullName': 'Eva Muirden',\n",
       "  'PreferredName': 'Eva',\n",
       "  'SearchName': 'Eva Eva Muirden',\n",
       "  'IsPermittedToLogon': False,\n",
       "  'LogonName': 'evam@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'\\xe6\\x82\\xd3nC\\xb6\\xa3\\x94\\x0e\\xd6B\\x8b-\\xe3\\xce\\xed\\xd1v<^\\x0e\\xc0/\\xfb\\xdc5g\\x1f\\x9b>_:',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': False,\n",
       "  'UserPreferences': '{\"theme\":\"le-frog\",\"dateFormat\":\"dd/mm/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"numbers\",\"pageLength\": 10},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'evam@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Lithuanian\"] ,\"HireDate\":\"2012-01-22T00:00:00\",\"Title\":\"Team Member\"}',\n",
       "  'OtherLanguages': '[\"Lithuanian\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1d4'),\n",
       "  'PersonID': 6,\n",
       "  'FullName': 'Sophia Hinton',\n",
       "  'PreferredName': 'Sophia',\n",
       "  'SearchName': 'Sophia Sophia Hinton',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'sophiah@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'E\\x1b\\xb1\\nQ_\\x063\\x15@\\xdb9 1\\xf9\\xd9\\xbcN\\xf56\\xa1\\xf8m\\x1c\\xa6\\xc79EV\\xba\\xa3\\xc0',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': True,\n",
       "  'UserPreferences': '{\"theme\":\"black-tie\",\"dateFormat\":\"mm/dd/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"full_numbers\",\"pageLength\": 25},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'sophiah@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Swedish\"] ,\"HireDate\":\"2007-05-14T00:00:00\",\"Title\":\"Team Member\",\"PrimarySalesTerritory\":\"Southeast\",\"CommissionRate\":\"4.55\"}',\n",
       "  'OtherLanguages': '[\"Swedish\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1d5'),\n",
       "  'PersonID': 7,\n",
       "  'FullName': 'Amy Trefl',\n",
       "  'PreferredName': 'Amy',\n",
       "  'SearchName': 'Amy Amy Trefl',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'amyt@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b\"z\\x92\\xbb\\xea\\x83\\x0c^\\xd0'\\xdc\\xc1\\xd7\\x10\\x13\\x0e\\xed\\x9e\\xa5\\x0f\\xb3\\xe6\\xd5\\xf7\\x93\\xdd\\xef\\xc4\\xb5\\x02\\x15\\x03?\",\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': True,\n",
       "  'UserPreferences': '{\"theme\":\"ui-darkness\",\"dateFormat\":\"mm/dd/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"full\",\"pageLength\": 50},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'amyt@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Slovak\",\"Spanish\",\"Polish\"] ,\"HireDate\":\"2009-02-15T00:00:00\",\"Title\":\"Team Member\",\"PrimarySalesTerritory\":\"Southeast\",\"CommissionRate\":\"0.58\"}',\n",
       "  'OtherLanguages': '[\"Slovak\",\"Spanish\",\"Polish\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1d6'),\n",
       "  'PersonID': 8,\n",
       "  'FullName': 'Anthony Grosse',\n",
       "  'PreferredName': 'Anthony',\n",
       "  'SearchName': 'Anthony Anthony Grosse',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'anthonyg@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'/\\xd8\\xb88\\xa3\\xc7wx\\xc9\\x90\\xf4d\\x07:\\xa2<\\x0e\\xee\\x01\\x97c\\xedj\\x99\\xc7tW\\xe8i\\x18\\x19\\xde',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': True,\n",
       "  'UserPreferences': '{\"theme\":\"blitzer\",\"dateFormat\":\"mm/dd/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"simple_numbers\",\"pageLength\": 10},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'anthonyg@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Croatian\",\"Dutch\",\"BokmÃ¥l\"] ,\"HireDate\":\"2010-07-23T00:00:00\",\"Title\":\"Team Member\",\"PrimarySalesTerritory\":\"Mideast\",\"CommissionRate\":\"0.11\"}',\n",
       "  'OtherLanguages': '[\"Croatian\",\"Dutch\",\"BokmÃ¥l\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1d7'),\n",
       "  'PersonID': 9,\n",
       "  'FullName': 'Alica Fatnowna',\n",
       "  'PreferredName': 'Alica',\n",
       "  'SearchName': 'Alica Alica Fatnowna',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'alicaf@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'}\\xfa\\xb0\\x8e\\x9a\\xc5t\\xc5\\xb1\\\\\\xf1\\x9d\\x18\\xe5\\xb3\\xebFn\\xacs\\x92\\xf4)X\\x15\\xb0\\x82!\\xe7\\x8e\\xa7\\x90',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': False,\n",
       "  'UserPreferences': '{\"theme\":\"humanity\",\"dateFormat\":\"mm/dd/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"simple\",\"pageLength\": 10},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'alicaf@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [] ,\"HireDate\":\"2007-12-07T00:00:00\",\"Title\":\"General Manager\"}',\n",
       "  'OtherLanguages': '[]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1d8'),\n",
       "  'PersonID': 10,\n",
       "  'FullName': 'Stella Rosenhain',\n",
       "  'PreferredName': 'Stella',\n",
       "  'SearchName': 'Stella Stella Rosenhain',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'stellar@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'\\x1b\\xa4\\xb5X\\x87\\xe2\\xbd\\xcb\\x06\\x08z \\xe1\\xcc`\\x8a\\xdd\\xcaS\\x8b\\xab\\xec\\x04A\\xd2\\xd6pM\\xca\\xfe.\\xa4',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': False,\n",
       "  'UserPreferences': '{\"theme\":\"dark-hive\",\"dateFormat\":\"mm/dd/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"numbers\",\"pageLength\": 10},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'stellar@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Dutch\",\"Finnish\",\"Lithuanian\"] ,\"HireDate\":\"2007-11-17T00:00:00\",\"Title\":\"Warehouse Supervisor\"}',\n",
       "  'OtherLanguages': '[\"Dutch\",\"Finnish\",\"Lithuanian\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1d9'),\n",
       "  'PersonID': 11,\n",
       "  'FullName': 'Ethan Onslow',\n",
       "  'PreferredName': 'Ethan',\n",
       "  'SearchName': 'Ethan Ethan Onslow',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'ethano@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'\\xd7\\x0f7\\xf5\\xc0\\x19I\\x99Y\\xdd\\xf9\\x87\\xe54;\\x95\\x7f\\xebX\\x95\\x9a\\x02p\\xe0i\\x19\\xd4\\x7f.\\x84\\xd4\\t',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': False,\n",
       "  'UserPreferences': '{\"theme\":\"ui-darkness\",\"dateFormat\":\"yy-mm-dd\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"full_numbers\",\"pageLength\": 25},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'ethano@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [] ,\"HireDate\":\"2011-12-17T00:00:00\",\"Title\":\"Warehouse Supervisor\"}',\n",
       "  'OtherLanguages': '[]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1da'),\n",
       "  'PersonID': 12,\n",
       "  'FullName': 'Henry Forlonge',\n",
       "  'PreferredName': 'Henry',\n",
       "  'SearchName': 'Henry Henry Forlonge',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'henryf@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'?t\\xba\\xd9[\\xd9\\x05\\x9e\\xfc\\xf8\\x0f\\x988\\x99\\xe2Ci\\x95\\x9f\\xd4\\x88\\x11:\\xa2\\xd7ah#\\xa9\\x16Y\\xcf',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': False,\n",
       "  'UserPreferences': '{\"theme\":\"le-frog\",\"dateFormat\":\"dd/mm/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"full\",\"pageLength\": 50},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'henryf@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Greek\",\"Slovak\"] ,\"HireDate\":\"2009-03-18T00:00:00\",\"Title\":\"Team Member\"}',\n",
       "  'OtherLanguages': '[\"Greek\",\"Slovak\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1db'),\n",
       "  'PersonID': 13,\n",
       "  'FullName': 'Hudson Hollinworth',\n",
       "  'PreferredName': 'Hudson',\n",
       "  'SearchName': 'Hudson Hudson Hollinworth',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'hudsonh@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'J\\xc0\\xa2A\\x80\\xc5OBZ\\xc8\\x8c\\xa3;b\\x13j7\\xb6\\xaa\\xa1\\x94;\\xea\\x14\\xfc4\\xe2(\\xec\\xcc5\\xc4',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': True,\n",
       "  'UserPreferences': '{\"theme\":\"black-tie\",\"dateFormat\":\"DD, MM d, yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"simple_numbers\",\"pageLength\": 10},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'hudsonh@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Croatian\"] ,\"HireDate\":\"2010-11-27T00:00:00\",\"Title\":\"Team Member\",\"PrimarySalesTerritory\":\"New England\",\"CommissionRate\":\"0.24\"}',\n",
       "  'OtherLanguages': '[\"Croatian\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1dc'),\n",
       "  'PersonID': 14,\n",
       "  'FullName': 'Lily Code',\n",
       "  'PreferredName': 'Lily',\n",
       "  'SearchName': 'Lily Lily Code',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'lilyc@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b\"\\xd0\\x06X\\x89;?\\x96'p\\x88\\xb3\\xc7\\x1d\\xcf\\xbfM\\xf6\\xe3\\x94~\\xed\\xbf\\x0c\\x8d\\xa2\\x85\\xef\\xd5\\xc7\\xd4\\xba\\xdd\",\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': True,\n",
       "  'UserPreferences': '{\"theme\":\"ui-darkness\",\"dateFormat\":\"dd/mm/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"simple\",\"pageLength\": 10},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'lilyc@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Finnish\",\"Bulgarian\"] ,\"HireDate\":\"2010-06-06T00:00:00\",\"Title\":\"Team Member\",\"PrimarySalesTerritory\":\"Southeast\",\"CommissionRate\":\"3.98\"}',\n",
       "  'OtherLanguages': '[\"Finnish\",\"Bulgarian\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1dd'),\n",
       "  'PersonID': 15,\n",
       "  'FullName': 'Taj Shand',\n",
       "  'PreferredName': 'Taj',\n",
       "  'SearchName': 'Taj Taj Shand',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'tajs@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'\\x9a\\xef\\xee\\xc0\\xdb\\xb0\\xeak%\\xf0\\xeb\\x99\\xc6,rO\\x18B\\x8dEy\\x9d\\xcd\\x8a{c\\xb8Y\\xb0\\xf8\\xfc\\xb4',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': True,\n",
       "  'UserPreferences': '{\"theme\":\"blitzer\",\"dateFormat\":\"dd/mm/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"numbers\",\"pageLength\": 10},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'tajs@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Arabic\",\"Greek\"] ,\"HireDate\":\"2009-03-14T00:00:00\",\"Title\":\"Manager\",\"PrimarySalesTerritory\":\"Far West\",\"CommissionRate\":\"2.29\"}',\n",
       "  'OtherLanguages': '[\"Arabic\",\"Greek\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1de'),\n",
       "  'PersonID': 16,\n",
       "  'FullName': 'Archer Lamble',\n",
       "  'PreferredName': 'Archer',\n",
       "  'SearchName': 'Archer Archer Lamble',\n",
       "  'IsPermittedToLogon': False,\n",
       "  'LogonName': 'archerl@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'\\x06\\x18\\x7fhc\\x12\\x95A\\x1b\\x02,H\\xb0s8\\xf2\\x0fL\\\\s\\xb3\\x1d\\xb6|\\x05l\\n\\xe0{\\x8fn\\xf6',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': True,\n",
       "  'UserPreferences': '{\"theme\":\"humanity\",\"dateFormat\":\"mm/dd/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"full_numbers\",\"pageLength\": 25},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'archerl@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Greek\"] ,\"HireDate\":\"2009-05-13T00:00:00\",\"Title\":\"Team Member\",\"PrimarySalesTerritory\":\"Plains\",\"CommissionRate\":\"1.88\"}',\n",
       "  'OtherLanguages': '[\"Greek\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1df'),\n",
       "  'PersonID': 17,\n",
       "  'FullName': 'Piper Koch',\n",
       "  'PreferredName': 'Piper',\n",
       "  'SearchName': 'Piper Piper Koch',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'piperk@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b\"a\\xd8\\xd0\\x82\\x8eU\\xe8\\x89^!k\\x88\\xfe\\x98\\xcb\\xa6\\xb5\\x94\\t\\x92'\\x9dt\\x99*\\xaa%c\\xf4\\xe6g\\x15\",\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': False,\n",
       "  'UserPreferences': '{\"theme\":\"dark-hive\",\"dateFormat\":\"mm/dd/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"full\",\"pageLength\": 50},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'piperk@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Romanian\",\"Portuguese\"] ,\"HireDate\":\"2011-10-15T00:00:00\",\"Title\":\"Manager\"}',\n",
       "  'OtherLanguages': '[\"Romanian\",\"Portuguese\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1e0'),\n",
       "  'PersonID': 18,\n",
       "  'FullName': 'Katie Darwin',\n",
       "  'PreferredName': 'Katie',\n",
       "  'SearchName': 'Katie Katie Darwin',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'katied@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'G\\xad,J\\x1ca\\x17V\\xfb\\x16M\\xe9\\x88\\xc2Y\\xe7\\xe5\\x16\\xddH\\xaf\\x9c4!\\xdd\\x0f\\xe9[?\\x1e?+',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': False,\n",
       "  'UserPreferences': '{\"theme\":\"ui-darkness\",\"dateFormat\":\"mm/dd/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"simple_numbers\",\"pageLength\": 10},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'katied@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Estonian\",\"Romanian\"] ,\"HireDate\":\"2008-07-12T00:00:00\",\"Title\":\"Team Member\"}',\n",
       "  'OtherLanguages': '[\"Estonian\",\"Romanian\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1e1'),\n",
       "  'PersonID': 19,\n",
       "  'FullName': 'Jai Shand',\n",
       "  'PreferredName': 'Jai',\n",
       "  'SearchName': 'Jai Jai Shand',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'jais@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b\"\\x84\\x90\\x1d6\\x04\\x14\\xcd\\x91'\\xe1\\xb8:\\x9f\\x9e|k\\x94\\n\\xa8\\xbd\\x88\\x86\\x998\\x8c\\x9f\\xa4e\\xdb\\xd2\\x97\\xda\",\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': False,\n",
       "  'UserPreferences': '{\"theme\":\"le-frog\",\"dateFormat\":\"mm/dd/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"simple\",\"pageLength\": 10},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'jais@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Finnish\",\"Dutch\"] ,\"HireDate\":\"2011-11-13T00:00:00\",\"Title\":\"Team Member\"}',\n",
       "  'OtherLanguages': '[\"Finnish\",\"Dutch\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)},\n",
       " {'_id': ObjectId('6287c4dc636e5a12693da1e2'),\n",
       "  'PersonID': 20,\n",
       "  'FullName': 'Jack Potter',\n",
       "  'PreferredName': 'Jack',\n",
       "  'SearchName': 'Jack Jack Potter',\n",
       "  'IsPermittedToLogon': True,\n",
       "  'LogonName': 'jackp@wideworldimporters.com',\n",
       "  'IsExternalLogonProvider': False,\n",
       "  'HashedPassword': b'\\x80$\\xe8\\x04\\x1c\\x1f[\\xd9\\x8f\\xe4i\\x83\\xf9\\x8c/^S\\xe2\\xcdu\\xbfJn\\xf6\\xac\\x13\\xa2\\x99\\xf1\\x0fqJ',\n",
       "  'IsSystemUser': True,\n",
       "  'IsEmployee': True,\n",
       "  'IsSalesperson': True,\n",
       "  'UserPreferences': '{\"theme\":\"black-tie\",\"dateFormat\":\"mm/dd/yy\",\"timeZone\": \"PST\",\"table\":{\"pagingType\":\"numbers\",\"pageLength\": 10},\"favoritesOnDashboard\":true}',\n",
       "  'PhoneNumber': '(415) 555-0102',\n",
       "  'FaxNumber': '(415) 555-0103',\n",
       "  'EmailAddress': 'jackp@wideworldimporters.com',\n",
       "  'Photo': None,\n",
       "  'CustomFields': '{ \"OtherLanguages\": [\"Arabic\"] ,\"HireDate\":\"2009-05-29T00:00:00\",\"Title\":\"General Manager\",\"PrimarySalesTerritory\":\"Southeast\",\"CommissionRate\":\"3.97\"}',\n",
       "  'OtherLanguages': '[\"Arabic\"]',\n",
       "  'LastEditedBy': 1,\n",
       "  'ValidFrom': datetime.datetime(2016, 5, 31, 23, 14),\n",
       "  'ValidTo': datetime.datetime(9999, 12, 31, 23, 59, 59, 999000)}]"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query_1 = {\n",
    "    '$unwind': '$CustomFields'\n",
    "}\n",
    "\n",
    "\n",
    "pipeline = [query_1]\n",
    "\n",
    "r = db.people.aggregate(pipeline)\n",
    "\n",
    "result = list(r)\n",
    "\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'_id': ObjectId('6287c4dc636e5a12693da1d0')}]"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query_1 = {\n",
    "    '$unwind': '$CustomFields'\n",
    "}\n",
    "\n",
    "\n",
    "query_2 = {\n",
    "   \"$project\": {\n",
    "       \"_id\": 1,\n",
    "       \"ComissionRate\": '$ComissionRate'\n",
    "   }\n",
    "}\n",
    "\n",
    "query_3 = {\n",
    "    '$sort': {'ComissionRate':-1}\n",
    "}\n",
    "\n",
    "query_4 = {\n",
    "    '$limit': 1\n",
    "}\n",
    "\n",
    "pipeline = [query_1, query_2, query_3, query_4]\n",
    "\n",
    "r = db.people.aggregate(pipeline)\n",
    "\n",
    "result = list(r)\n",
    "\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. The marketing team needs to know:  \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**A. What is the name of the sales person with the largest sum of invoice values in 2013 (person whose customers paid the most money)?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "        '$unwind': '$invoicelines'\n",
    "    }\n",
    "\n",
    "\n",
    "query_2 = {\n",
    "    '$project': {\n",
    "        '_id': 1,\n",
    "        'SalespersonPersonID': 1,\n",
    "        'InvoiceYear': {'$year': '$InvoiceDate'},\n",
    "        'SalesAmount': {'$multiply': ['$invoicelines.Quantity','$invoicelines.UnitPrice']}\n",
    "    }\n",
    "}\n",
    "\n",
    "query_3 = { \n",
    "        '$match' : {\n",
    "            'InvoiceYear': {'$eq': 2013}\n",
    "        } \n",
    "    }\n",
    "\n",
    "query_4 = {\n",
    "    '$group': {\n",
    "            '_id': '$SalespersonPersonID',\n",
    "            'TotalSalesAmount': {'$sum': '$SalesAmount'}\n",
    "    }\n",
    "}\n",
    "\n",
    "query_5 = {\n",
    "        '$lookup':{\n",
    "           'from': 'people',\n",
    "           'localField': '_id',\n",
    "           'foreignField': 'PersonID',\n",
    "           'as': 'SalesPerson'\n",
    "        }\n",
    "    }\n",
    "\n",
    "\n",
    "query_6 = {\n",
    "    '$project': {\n",
    "        '_id': 0,\n",
    "        'FullName': '$SalesPerson.FullName',\n",
    "        'TotalSalesAmount': 1\n",
    "    }\n",
    "}\n",
    "\n",
    "query_7 = { \n",
    "        '$sort' : {'TotalSalesAmount': -1}\n",
    "    }\n",
    "\n",
    "query_8 = {\n",
    "    '$limit': 1\n",
    "}\n",
    "\n",
    "pipeline = [query_1, query_2, query_3, query_4, query_5, query_6, query_7, query_8] #, , query_3,  query_6, ]\n",
    "\n",
    "r = database.invoices_emb.aggregate(pipeline)\n",
    "\n",
    "result = list(r)\n",
    "\n",
    "pprint(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:** The sales person with the largest sum of invoices value in 2013 is Hudson Onslow, with a total of 4864279.75."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**B. Who are the most common `PickedByPersonID` person names for orders done by customer `Adriana Pena`?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "        '$unwind': '$orders'\n",
    "    }\n",
    "\n",
    "query_3 = { \n",
    "    '$match' : {\n",
    "        'CustomerName': 'Adriana Pena'\n",
    "        } \n",
    "    }\n",
    "\n",
    "query_2 = {\n",
    "    '$project': {\n",
    "        '_id': 0,\n",
    "        \"CustomerName\": 1,\n",
    "        'PickedByPersonID':'$orders.PickedByPersonID'\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "query_5 = {\n",
    "        '$lookup':{\n",
    "           'from': 'people',\n",
    "           'localField': 'PickedByPersonID',\n",
    "           'foreignField': 'PersonID',\n",
    "           'as': 'People'\n",
    "        }\n",
    "    }\n",
    "\n",
    "\n",
    "query_7 = {\n",
    "    '$unwind': '$People'\n",
    "}\n",
    "\n",
    "\n",
    "query_6 = {\n",
    "    '$project': {\n",
    "        '_id': 0,\n",
    "        \"CustomerName\": 1,\n",
    "        'PickedByPersonID': 1,\n",
    "        'PickedByPersonName':'$People.FullName',\n",
    "        \n",
    "    }\n",
    "}\n",
    "\n",
    "groupby_query = {\n",
    "    '$group': {\n",
    "        '_id': \"$PickedByPersonName\",\n",
    "        'NumberOrders':{'$sum' : 1}\n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "query_12 = { \n",
    "        '$sort' : {'NumberOrders': -1}\n",
    "    }\n",
    "\n",
    "query_8 = {\n",
    "    '$limit': 3\n",
    "}\n",
    "\n",
    "pipeline = [query_1, query_3, query_2, query_5, query_7, query_6, groupby_query, query_12, query_8] #, , ,  query_6, ] query_2, query_5, query_7, query_10, query_6, query_3,\n",
    "\n",
    "r = database.customers_emb.aggregate(pipeline)\n",
    "\n",
    "result = list(r)\n",
    "\n",
    "pprint(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**C. How many people have in their name the string `Sara`?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "database.people.count_documents({\"FullName\":{'$regex' : '.*Sara.*'}})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list(database.people.find({\"FullName\":{'$regex' : '.*Sara.*'}}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**D. What are the top 10 most Common Names (Primary or Surnames) of people?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_1 = {\n",
    "    '$project': {\n",
    "        '_id': 1,\n",
    "        'PersonID': 1,\n",
    "        'FullName': 1,\n",
    "        'SplitName': {'$split': [ \"$FullName\", \" \" ]}        \n",
    "    }\n",
    "}\n",
    "\n",
    "\n",
    "# query_3 = { \n",
    "#         '$match' : {\n",
    "#             'InvoiceYear': {'$eq': 2013}\n",
    "#         } \n",
    "#     }\n",
    "\n",
    "# query_4 = {\n",
    "#     '$group': {\n",
    "#             '_id': '$PersonID',\n",
    "#             'SplitName': {'$sum': 1}\n",
    "#     }\n",
    "# }\n",
    "\n",
    "\n",
    "query_8 = {\n",
    "    '$limit': 3\n",
    "}\n",
    "\n",
    "pipeline = [query_1, query_8] #, query_2, query_3, query_4, query_5, query_6, query_7, query_8, query_3,  query_6, ]\n",
    "\n",
    "r = database.people.aggregate(pipeline)\n",
    "\n",
    "result = list(r)\n",
    "\n",
    "pprint(result)"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
